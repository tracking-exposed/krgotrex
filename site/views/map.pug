section.component#component-map
  #map.map
  script.
    /**
    * Leaflet Map
    */
    // Create markers and geodata
    const mapCenter = [13.429, 52.494], // Umspannwerk Kreuzberg
          sites = !{JSON.stringify(sites)},
          results = !{JSON.stringify(results)},
          features = sites.map(site => {
            const isInfiltrated = results.find((result) => {
              return result.id === site.lastResultId && Object.keys(result.googles).length > 0;
            });

            return {
              "type": "Feature",
              "geometry": {
                "type": "Point",
                "coordinates": [ Number(site.longitude), Number(site.latitude) ]
              },
              "properties": {
                "id": site.id,
                "name": site.name,
                "address": site.address,
                "url": site.href,
                "tags": site.tags,
                "icon": new ol.style.Icon({
                  anchor: [0.5, 1],
                  src: isInfiltrated
                    ? '/assets/img/fist-pin--alert.png'
                    : '/assets/img/fist-pin--success.png',
                  scale: 0.75
                })
              }
            }
          });

    let styles = {};
    const styleFunction = (feature) => {
      styles = {
        "Point": new ol.style.Style({
          "image": feature.get('icon')
        })
      }
      return styles[feature.getGeometry().getType()];
    };

    const geojsonObject = {
      "type": "FeatureCollection",
      "features": features
    };

    const vectorSource = new ol.source.Vector({
      features: (new ol.format.GeoJSON()).readFeatures(geojsonObject, {
        featureProjection: "EPSG:3857"
      })
    });

    const vectorLayer = new ol.layer.Vector({
      source: vectorSource,
      style: styleFunction
    });

    const view = new ol.View({
      center: ol.proj.fromLonLat(mapCenter),
      zoom: 17,
    });

    const map = new ol.Map({
      layers: [
        new ol.layer.Tile({
          preload: Infinity,
          source: new ol.source.OSM()
        }),
        vectorLayer
      ],
      target: "map",
      view,
      interactions: ol.interaction.defaults({mouseWheelZoom:false}),
    });

    let selectStyle = {};
    const select = new ol.interaction.Select({
      condition: ol.events.condition.click,
      style: (feature) => {
        return new ol.style.Style({
          "image": new ol.style.Icon({
            anchor: [0.5, 1],
            src: '/assets/img/fist-pin--primary.png',
            scale: 0.75
          })
        });
      }
    });
    map.addInteraction(select);

    select.on('select', (event) => {
      if (event.selected.length) {
        const selectedMarkerId = event.selected[0].get('id'),
              correspondingSiteResult = selectedMarkerId
                ? document.getElementById(selectedMarkerId)
                : null;
        if (correspondingSiteResult) {
          selectElement(correspondingSiteResult);
        } else {
          clearViewClasses();
        }
      } else {
        clearViewClasses();
      }
    });

    /**
     * Hack to force rendering of map tiles
     */
    const waitForMap = setInterval(function() {
      if ($('div.ol-viewport').length) {
        window.dispatchEvent(new Event('resize'));
        clearInterval(waitForMap);
      }
    }, 100);
